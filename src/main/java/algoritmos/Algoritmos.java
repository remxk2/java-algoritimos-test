package main.java.algoritmos;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;


public class Algoritmos {
	
	public int numerosMenores(List<Integer> valores, Integer target) {
		/* 
		 * Você recebera um array que contem apenas números inteiros e ira receber um numero alvo.
		 * Calcule quantos números do array são menores que o numero alto.
		 * Exemplo: Array[3, 6, 1, 0, 10, 8], Alvo: 5
		 * O resultado deverá retornar 3 pois apenas os números 3, 1 e 0 são menores que 5
		 */
		
		/* Algoritmo aqui */
		
		return 1;
	}
	
	public List<Integer> numerosParesEimpares(List<Integer> valores) {
		/* Você recebera um array que contem apenas números inteiro.
		 * Calcule quantos números do array são pares e quantos são ímpares.
		 * Exemplo: Array[3, 6, 1, 0, 10, 8]
		 * O resultado deverá retornar uma lista contendo dois valores [4, 2], 4 pares, 2 ímpares, 0 podem ser contados como pares.
		 */


		return List.of(1);
	}
	
	public int joias(String jewels, String stones) {
		/* Você recebera duas strings, a primeira são quais pedras são jóias e a segunda é quais pedras você tem.
		 * Cada letra corresponde a uma jóia/pedra.
		 * Calcule quantas jóias existem entre as pedras.
		 * Exemplo: jóias =  "aA", pedras = "bbBBcCCDDaA"
		 * O resultado deverá retornar 2 pois "a" e "A" são jóias, e no meio das pedras podemos notar que existe um "aA" bem no final.
		 */
		
		
		
		return 1;
	}
	
	public String removerLetrasDuplicadas(String letras) {
		/* Você recebera uma string com varias letras aleatórias.
		 * Remova todas as letras duplicadas e retorne o resultado.
		 * Letras maiúsculas e minúsculas são consideradas iguais.
		 * Exemplo: string = "GyWYCpbGJslgzzFwGtQEEAaJMrbpGayPIIUtICck"
		 * O resultado deverá retornar "GyWCpbJslzFtQEAMrIUk".
		 */

		return "s";
	}
	
	
	public List<Integer> encontrarItem(List<Integer> valores) {
		/* Você recebera uma lista com n numeros.
		 * Retorne os itens que estão nas posições 25%, 50% e 75% do array.
		 * Decimais devem arrendodar para o valor mais proximo para cima, exp: 2.5 arrendonda para 3, 5.3 arredonda para 6.
		 * Exemplo: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
		 * O resultado deverá retornar [3, 5, 8].
		 */

		return List.of(1);
	}
	
	
	public String TitleName(String text) {
		/* Você recebera uma string contendo varias palavras.
		 * Capitalize a primeira letra de cada palavra dentro desta string e retorno o valor;
		 * Exemplo: "o rato roeu a roupa do rei de roma"
		 * O resultado deve ser: "O Ratou Roeu A Rouma Do Rei De Roma"
		 */
		
		return "s";
	}
	
	public List<Integer> menorDiferenca(List<Integer> valores) {
		/* Você recebera um array de numeros reais.
		 * Calcule a menor diferença entre os digitos, retorne os digitos e a diferença;
		 * Caso houver mais que um grupo, traga o primeiro.
		 * Exemplo: [9, 1, 20, 54, 2, 15, 33, 47]
		 * O resultado deve ser: [1, 2, 1]
		 * Explicação: A menor diferença entre dois digitos do array é 1 e 2 porque a diferença entre eles é 1 [1, 2, 1]
		 */
		
		return List.of(1);
	}
	

}
